#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Screw assembly example

This example for the screwing task will demonstrate how to receive all available
information from the simulation and give an example on how to control the robot.
Feel free to extend this example with your own solution.
"""
from __future__ import print_function

import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from franka_gripper.msg import GraspActionGoal
from std_srvs.srv import Empty, EmptyRequest
import sensor_msgs.msg


def wait_for_state_update(scene, box_name, box_is_known=False, box_is_attached=False, timeout=4):
    """Wait until the planning scene state changed.
    """
    start = rospy.get_time()
    seconds = rospy.get_time()
    while (seconds - start < timeout) and not rospy.is_shutdown():
        # Test if the box is in attached objects
        attached_objects = scene.get_attached_objects([box_name])
        is_attached = len(attached_objects.keys()) > 0

        # Test if the box is in the scene.
        # Note that attaching the box will remove it from known_objects
        is_known = box_name in scene.get_known_object_names()

        # Test if we are in the expected state
        if (box_is_attached == is_attached) and (box_is_known == is_known):
            return True

        # Sleep so that we give other threads time on the processor
        rospy.sleep(0.1)
        seconds = rospy.get_time()

    # If we exited the while loop without returning then we timed out
    return False


def main():
    """Runs the assembly example.
    """

    # Start a ros-node
    rospy.init_node("assembly_example", anonymous=True)

    # Signal assembly manager that we are ready to start the assembly run
    # This will unpause the simulation and makes all relevant rostopics accessible
    rospy.wait_for_service('user_ready')
    user_ready = rospy.ServiceProxy('user_ready', Empty)
    user_ready(EmptyRequest())

    # Get constants from the rosparam-server
    # Most of this information is only availabe on difficulty levels 1 and 2
    difficulty_level = rospy.get_param('/difficulty_level')
    eval_mode = rospy.get_param('/eval_mode')

    if difficulty_level == 1 or difficulty_level == 2:

        table_height = rospy.get_param('/table_height')

        # For more information on what exactly these parameters mean please look into the images folder
        fixture_outer_height = rospy.get_param('fixture_outer_height')
        fixture_inner_height = rospy.get_param('fixture_inner_height')
        fixture_inner_width = rospy.get_param('fixture_inner_width')
        fixture_outer_width = rospy.get_param('fixture_outer_width')

        nut_top_length = rospy.get_param('nut_top_length')
        nut_bottom_length = rospy.get_param('nut_bottom_length')
        nut_top_radius = rospy.get_param('nut_top_radius')
        nut_bottom_radius = rospy.get_param('nut_bottom_radius')

        screw_top_length = rospy.get_param('screw_top_length')
        screw_bottom_length = rospy.get_param('screw_bottom_length')
        screw_top_radius = rospy.get_param('screw_top_radius')
        screw_bottom_radius = rospy.get_param('screw_bottom_radius')

        thread_length = rospy.get_param('thread_length')
        # The distance the screw and nut move towards each other for one full rotation of the screw
        thread_pitch = rospy.get_param('thread_pitch')

    # Get object positions
    # These are only available on difficulty levels 1 and 2.
    # Note that there is noise added to these poses.
    # For more information on where exactly these are located on the object check the images folder.
    fixture_pos_msg = rospy.wait_for_message(
        '/fixture_pos', geometry_msgs.msg.PointStamped)
    fixture_quat_msg = rospy.wait_for_message(
        '/fixture_quat', geometry_msgs.msg.QuaternionStamped)

    nut_pos_msg = rospy.wait_for_message(
        '/nut_pos', geometry_msgs.msg.PointStamped)
    nut_quat_msg = rospy.wait_for_message(
        '/nut_quat', geometry_msgs.msg.QuaternionStamped)
    nut_head_pos_msg = rospy.wait_for_message(
        '/nut_head_pos', geometry_msgs.msg.PointStamped)
    nut_peg_pos_msg = rospy.wait_for_message(
        '/nut_peg_pos', geometry_msgs.msg.PointStamped)

    screw_pos_msg = rospy.wait_for_message(
        '/screw_pos', geometry_msgs.msg.PointStamped)
    screw_quat_msg = rospy.wait_for_message(
        '/screw_quat', geometry_msgs.msg.QuaternionStamped)
    screw_head_msg = rospy.wait_for_message(
        '/screw_head_pos', geometry_msgs.msg.PointStamped)

    # In train mode the ground truth for these sensors is also available
    if not eval_mode:
        fixture_pos_msg_GT = rospy.wait_for_message(
            '/fixture_pos_GT', geometry_msgs.msg.PointStamped)
        fixture_quat_msg_GT = rospy.wait_for_message(
            '/fixture_quat_GT', geometry_msgs.msg.QuaternionStamped)

        nut_pos_msg_GT = rospy.wait_for_message(
            '/nut_pos_GT', geometry_msgs.msg.PointStamped)
        nut_quat_msg_GT = rospy.wait_for_message(
            '/nut_quat_GT', geometry_msgs.msg.QuaternionStamped)
        nut_head_pos_msg_GT = rospy.wait_for_message(
            '/nut_head_pos_GT', geometry_msgs.msg.PointStamped)
        nut_peg_pos_msg_GT = rospy.wait_for_message(
            '/nut_peg_pos_GT', geometry_msgs.msg.PointStamped)

        screw_pos_msg_GT = rospy.wait_for_message(
            '/screw_pos_GT', geometry_msgs.msg.PointStamped)
        screw_quat_msg_GT = rospy.wait_for_message(
            '/screw_quat_GT', geometry_msgs.msg.QuaternionStamped)
        screw_head_msg_GT = rospy.wait_for_message(
            '/screw_head_pos_GT', geometry_msgs.msg.PointStamped)

    # Access the joint states
    joint_states_msg = rospy.wait_for_message(
        '/joint_states', sensor_msgs.msg.JointState)

    # Access the camera streams
    workspace_cam_depth_msg = rospy.wait_for_message(
        '/cameras/workspace_cam/depth', sensor_msgs.msg.Image)
    workspace_cam_rgb_msg = rospy.wait_for_message(
        '/cameras/workspace_cam/rgb', sensor_msgs.msg.Image)

    workspace_cam2_depth_msg = rospy.wait_for_message(
        '/cameras/workspace_cam2/depth', sensor_msgs.msg.Image)
    workspace_cam2_rgb_msg = rospy.wait_for_message(
        '/cameras/workspace_cam2/rgb', sensor_msgs.msg.Image)

    gripper_cam_depth_msg = rospy.wait_for_message(
        '/cameras/gripper_cam/depth', sensor_msgs.msg.Image)
    gripper_cam_rgb_msg = rospy.wait_for_message(
        '/cameras/gripper_cam/rgb', sensor_msgs.msg.Image)

    # The following is an example on how to control the robot with MoveIt. You can also use any other available method in ROS to control the robot.
    # For a more in detail tutorial on how to command the robot via MoveIt please see https://ros-planning.github.io/moveit_tutorials/doc/move_group_python_interface/move_group_python_interface_tutorial.html.

    # Instantiate a `RobotCommander`_ object. Provides information such as the robot's
    # kinematic model and the robot's current joint states
    moveit_commander.roscpp_initialize(sys.argv)
    robot = moveit_commander.RobotCommander()

    # Instantiate a `PlanningSceneInterface`_ object.  This provides a remote interface
    # for getting, setting, and updating the robot's internal understanding of the
    # surrounding world:
    scene = moveit_commander.PlanningSceneInterface()

    # Insert the table into the planning scene
    table_pose = geometry_msgs.msg.PoseStamped()
    table_pose.pose.orientation.w = 1
    table_pose.pose.position.x = 0.5
    table_pose.pose.position.y = 0.0
    table_pose.pose.position.z = table_height / 2
    table_pose.header.frame_id = 'world'

    while not wait_for_state_update(scene, 'table', True, False, 4):
        scene.add_box('table', table_pose, size=(0.50, 0.80, table_height))

    # Instantiate a `MoveGroupCommander`_ object.  This object is an interface
    # to a planning group (group of joints).
    # This interface can be used to plan and execute motions:
    move_group = moveit_commander.MoveGroupCommander('panda_arm')
    move_group.set_support_surface_name('table')
    move_group_hand = moveit_commander.MoveGroupCommander('panda_hand')

    # Create a `DisplayTrajectory`_ ROS publisher which is used to display
    # trajectories in Rviz:
    display_trajectory_publisher = rospy.Publisher(
        "/move_group/display_planned_path",
        moveit_msgs.msg.DisplayTrajectory,
        queue_size=20,
    )

    move_group.set_named_target('ready')
    move_group.go(wait=True)
    move_group.stop()
    move_group.clear_pose_targets()

    # open the gripper
    joint_goal = move_group_hand.get_current_joint_values()
    joint_goal[0] = 0.04
    joint_goal[1] = 0.04
    move_group_hand.go(joint_goal, wait=True)
    # Calling ``stop()`` ensures that there is no residual movement
    move_group_hand.stop()

    # Move the robot along some waypoints
    waypoints = []
    pose_goal = move_group.get_current_pose().pose
    pose_goal.position.x = 0.5
    pose_goal.position.y = -0.2
    pose_goal.position.z = 0.6
    waypoints.append(copy.deepcopy(pose_goal))
    pose_goal.position.y = 0.2
    waypoints.append(copy.deepcopy(pose_goal))

    # Do some planning
    plan, fraction = move_group.compute_cartesian_path(waypoints, 0.01, 0)
    ref_state = robot.get_current_state()
    plan = move_group.retime_trajectory(
        ref_state,
        plan,
        velocity_scaling_factor=0.4,
        acceleration_scaling_factor=0.4,
        algorithm="time_optimal_trajectory_generation"
    )

    # Display the plan
    display_trajectory = moveit_msgs.msg.DisplayTrajectory()
    display_trajectory.trajectory_start = robot.get_current_state()
    display_trajectory.trajectory.append(plan)
    display_trajectory_publisher.publish(display_trajectory)

    # Execute the plan
    move_group.execute(plan, wait=True)

    # Close the gripper
    grasp_action_pub = rospy.Publisher(
        '/franka_gripper/grasp/goal', GraspActionGoal, latch=True, queue_size=20)
    gag = GraspActionGoal()
    gag.goal.width = 0.03
    gag.goal.epsilon.inner = 0.01
    gag.goal.epsilon.outer = 0.01
    gag.goal.force = 10
    gag.goal.speed = 0.05
    grasp_action_pub.publish(gag)
    rospy.sleep(2)

if __name__ == "__main__":
    main()
